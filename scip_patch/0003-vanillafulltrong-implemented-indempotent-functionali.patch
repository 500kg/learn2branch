From 167deabfe5ce7d91e165c7b2a7831c9ae4396699 Mon Sep 17 00:00:00 2001
From: Maxime Gasse <maxime.gasse@gmail.com>
Date: Wed, 24 Apr 2019 13:17:16 -0400
Subject: [PATCH 3/4] vanillafulltrong: implemented indempotent functionality

---
 src/scip/branch_allfullstrong.c     |   4 +-
 src/scip/branch_fullstrong.c        |   2 +-
 src/scip/branch_relpscost.c         |   2 +-
 src/scip/branch_vanillafullstrong.c |   4 +-
 src/scip/lp.c                       | 136 +++++++++++++++++-----------
 src/scip/lp.h                       |   2 +
 src/scip/scip_var.c                 |  30 +++++-
 src/scip/scip_var.h                 |   2 +
 8 files changed, 121 insertions(+), 61 deletions(-)

diff --git a/src/scip/branch_allfullstrong.c b/src/scip/branch_allfullstrong.c
index 0962d20ca2..2bee7789a9 100644
--- a/src/scip/branch_allfullstrong.c
+++ b/src/scip/branch_allfullstrong.c
@@ -397,12 +397,12 @@ SCIP_RETCODE SCIPselectVarPseudoStrongBranching(
 
          if( integral )
          {
-            SCIP_CALL( SCIPgetVarStrongbranchInt(scip, pseudocands[c], INT_MAX,
+            SCIP_CALL( SCIPgetVarStrongbranchInt(scip, pseudocands[c], INT_MAX, FALSE,
                   skipdown[c] ? NULL : &down, skipup[c] ? NULL : &up, &downvalid, &upvalid, &downinf, &upinf, &downconflict, &upconflict, &lperror) );
          }
          else
          {
-            SCIP_CALL( SCIPgetVarStrongbranchFrac(scip, pseudocands[c], INT_MAX,
+            SCIP_CALL( SCIPgetVarStrongbranchFrac(scip, pseudocands[c], INT_MAX, FALSE,
                   skipdown[c] ? NULL : &down, skipup[c] ? NULL : &up, &downvalid, &upvalid, &downinf, &upinf, &downconflict, &upconflict, &lperror) );
          }
          nsbcalls++;
diff --git a/src/scip/branch_fullstrong.c b/src/scip/branch_fullstrong.c
index 1684dffc9b..e1ec6b311e 100644
--- a/src/scip/branch_fullstrong.c
+++ b/src/scip/branch_fullstrong.c
@@ -343,7 +343,7 @@ SCIP_RETCODE SCIPselectVarStrongBranching(
          }
          else
          {
-            SCIP_CALL( SCIPgetVarStrongbranchFrac(scip, lpcands[c], INT_MAX,
+            SCIP_CALL( SCIPgetVarStrongbranchFrac(scip, lpcands[c], INT_MAX, FALSE,
                   skipdown[i] ? NULL : &down, skipup[i] ? NULL : &up, &downvalid, &upvalid, &downinf, &upinf,
                   &downconflict, &upconflict, &lperror) );
          }
diff --git a/src/scip/branch_relpscost.c b/src/scip/branch_relpscost.c
index fe7786479f..4a0caf0423 100644
--- a/src/scip/branch_relpscost.c
+++ b/src/scip/branch_relpscost.c
@@ -1076,7 +1076,7 @@ SCIP_RETCODE execRelpscost(
          else
          {
             /* apply strong branching */
-            SCIP_CALL( SCIPgetVarStrongbranchFrac(scip, branchcands[c], inititer,
+            SCIP_CALL( SCIPgetVarStrongbranchFrac(scip, branchcands[c], inititer, FALSE,
                   &down, &up, &downvalid, &upvalid, &downinf, &upinf, &downconflict, &upconflict, &lperror) );
 
             ndomredsdown = ndomredsup = 0;
diff --git a/src/scip/branch_vanillafullstrong.c b/src/scip/branch_vanillafullstrong.c
index 3f4ac3ee17..e40c1dcad3 100644
--- a/src/scip/branch_vanillafullstrong.c
+++ b/src/scip/branch_vanillafullstrong.c
@@ -425,12 +425,12 @@ SCIP_RETCODE runVanillaStrongBranching(
       /* apply strong branching */
       if( integral )
       {
-         SCIP_CALL( SCIPgetVarStrongbranchInt(scip, cands[c], INT_MAX,
+         SCIP_CALL( SCIPgetVarStrongbranchInt(scip, cands[c], INT_MAX, indempotent,
             &down, &up, &downvalid, &upvalid, &downinf, &upinf, &downconflict, &upconflict, &lperror) );
       }
       else
       {
-         SCIP_CALL( SCIPgetVarStrongbranchFrac(scip, cands[c], INT_MAX,
+         SCIP_CALL( SCIPgetVarStrongbranchFrac(scip, cands[c], INT_MAX, indempotent,
             &down, &up, &downvalid, &upvalid, &downinf, &upinf, &downconflict, &upconflict, &lperror) );
       }
       nsbcalls++;
diff --git a/src/scip/lp.c b/src/scip/lp.c
index 8ee6a3b697..f99380a266 100644
--- a/src/scip/lp.c
+++ b/src/scip/lp.c
@@ -4241,6 +4241,8 @@ SCIP_RETCODE SCIPcolGetStrongbranch(
    SCIP_PROB*            prob,               /**< problem data */
    SCIP_LP*              lp,                 /**< LP data */
    int                   itlim,              /**< iteration limit for strong branchings */
+   SCIP_Bool             updatecol,          /**< should col be updated, or should it stay in its current state ? */
+   SCIP_Bool             updatestat,         /**< should stat be updated, or should it stay in its current state ? */
    SCIP_Real*            down,               /**< stores dual bound after branching column down */
    SCIP_Real*            up,                 /**< stores dual bound after branching column up */
    SCIP_Bool*            downvalid,          /**< stores whether the returned down value is a valid dual bound, or NULL;
@@ -4250,6 +4252,17 @@ SCIP_RETCODE SCIPcolGetStrongbranch(
    SCIP_Bool*            lperror             /**< pointer to store whether an unresolved LP error occurred */
    )
 {
+   SCIP_Real sbdown;
+   SCIP_Real sbup;
+   SCIP_Bool sbdownvalid;
+   SCIP_Bool sbupvalid;
+   SCIP_Longint validsblp;
+   SCIP_Real sbsolval;
+   SCIP_Real sblpobjval;
+   SCIP_Longint sbnode;
+   int sbitlim;
+   int nsbcalls;
+
    assert(col != NULL);
    assert(col->var != NULL);
    assert(SCIPcolIsIntegral(col));
@@ -4277,29 +4290,36 @@ SCIP_RETCODE SCIPcolGetStrongbranch(
 
    *lperror = FALSE;
 
-   if( col->validsblp != stat->nlps || itlim > col->sbitlim )
-   {
-      col->validsblp = stat->nlps;
-      col->sbsolval = col->primsol;
-      col->sblpobjval = SCIPlpGetObjval(lp, set, prob);
-      col->sbnode = stat->nnodes;
+   sbdown = col->sbdown;
+   sbup = col->sbup;
+   sbdownvalid = col->sbdownvalid;
+   sbupvalid = col->sbupvalid;
+   validsblp = col->validsblp;
+   sbsolval = col->sbsolval;
+   sblpobjval = col->sblpobjval;
+   sbnode = col->sbnode;
+   sbitlim = col->sbitlim;
+   nsbcalls = col->nsbcalls;
+
+   if( validsblp != stat->nlps || itlim > sbitlim )
+   {
+      validsblp = stat->nlps;
+      sbsolval = col->primsol;
+      sblpobjval = SCIPlpGetObjval(lp, set, prob);
+      sbnode = stat->nnodes;
       assert(integral || !SCIPsetIsFeasIntegral(set, col->primsol));
 
       /* if a loose variables has an infinite best bound, the LP bound is -infinity and no gain can be achieved */
       if( lp->looseobjvalinf > 0 )
       {
-         col->sbdown = -SCIPsetInfinity(set);
-         col->sbup = -SCIPsetInfinity(set);
-         col->sbdownvalid = FALSE;
-         col->sbupvalid = FALSE;
+         sbdown = -SCIPsetInfinity(set);
+         sbup = -SCIPsetInfinity(set);
+         sbdownvalid = FALSE;
+         sbupvalid = FALSE;
       }
       else
       {
          SCIP_RETCODE retcode;
-         SCIP_Real sbdown;
-         SCIP_Real sbup;
-         SCIP_Bool sbdownvalid;
-         SCIP_Bool sbupvalid;
          int iter;
 
          SCIPsetDebugMsg(set, "performing strong branching on variable <%s>(%g) with %d iterations\n",
@@ -4309,8 +4329,8 @@ SCIP_RETCODE SCIPcolGetStrongbranch(
          SCIPclockStart(stat->strongbranchtime, set);
 
          /* call LPI strong branching */
-         col->sbitlim = itlim;
-         col->nsbcalls++;
+         sbitlim = itlim;
+         nsbcalls++;
 
          sbdown = lp->lpobjval;
          sbup = lp->lpobjval;
@@ -4327,14 +4347,14 @@ SCIP_RETCODE SCIPcolGetStrongbranch(
          if( retcode == SCIP_LPERROR )
          {
             *lperror = TRUE;
-            col->sbdown = SCIP_INVALID;
-            col->sbup = SCIP_INVALID;
-            col->sbdownvalid = FALSE;
-            col->sbupvalid = FALSE;
-            col->validsblp = -1;
-            col->sbsolval = SCIP_INVALID;
-            col->sblpobjval = SCIP_INVALID;
-            col->sbnode = -1;
+            sbdown = SCIP_INVALID;
+            sbup = SCIP_INVALID;
+            sbdownvalid = FALSE;
+            sbupvalid = FALSE;
+            validsblp = -1;
+            sbsolval = SCIP_INVALID;
+            sblpobjval = SCIP_INVALID;
+            sbnode = -1;
          }
          else
          {
@@ -4344,30 +4364,30 @@ SCIP_RETCODE SCIPcolGetStrongbranch(
             SCIP_CALL( retcode );
 
             looseobjval = getFiniteLooseObjval(lp, set, prob);
-            col->sbdown = MIN(sbdown + looseobjval, lp->cutoffbound);
-            col->sbup = MIN(sbup + looseobjval, lp->cutoffbound);
-
-            col->sbdownvalid = sbdownvalid;
-            col->sbupvalid = sbupvalid;
+            sbdown = MIN(sbdown + looseobjval, lp->cutoffbound);
+            sbup = MIN(sbup + looseobjval, lp->cutoffbound);
 
             /* update strong branching statistics */
-            if( iter == -1 )
+            if( updatestat )
             {
-               /* calculate average iteration number */
-               iter = stat->ndualresolvelps > 0 ? (int)(2*stat->ndualresolvelpiterations / stat->ndualresolvelps)
-                  : stat->nduallps > 0 ? (int)((stat->nduallpiterations / stat->nduallps) / 5)
-                  : stat->nprimalresolvelps > 0 ? (int)(2*stat->nprimalresolvelpiterations / stat->nprimalresolvelps)
-                  : stat->nprimallps > 0 ? (int)((stat->nprimallpiterations / stat->nprimallps) / 5)
-                  : 0;
-               if( iter/2 >= itlim )
-                  iter = 2*itlim;
-            }
-            SCIPstatIncrement(stat, set, nstrongbranchs);
-            SCIPstatAdd(stat, set, nsblpiterations, iter);
-            if( stat->nnodes == 1 )
-            {
-               SCIPstatIncrement(stat, set, nrootstrongbranchs);
-               SCIPstatAdd(stat, set, nrootsblpiterations, iter);
+               if( iter == -1 )
+               {
+                  /* calculate average iteration number */
+                  iter = stat->ndualresolvelps > 0 ? (int)(2*stat->ndualresolvelpiterations / stat->ndualresolvelps)
+                     : stat->nduallps > 0 ? (int)((stat->nduallpiterations / stat->nduallps) / 5)
+                     : stat->nprimalresolvelps > 0 ? (int)(2*stat->nprimalresolvelpiterations / stat->nprimalresolvelps)
+                     : stat->nprimallps > 0 ? (int)((stat->nprimallpiterations / stat->nprimallps) / 5)
+                     : 0;
+                  if( iter/2 >= itlim )
+                     iter = 2*itlim;
+               }
+               SCIPstatIncrement(stat, set, nstrongbranchs);
+               SCIPstatAdd(stat, set, nsblpiterations, iter);
+               if( stat->nnodes == 1 )
+               {
+                  SCIPstatIncrement(stat, set, nrootstrongbranchs);
+                  SCIPstatAdd(stat, set, nrootsblpiterations, iter);
+               }
             }
          }
 
@@ -4375,17 +4395,31 @@ SCIP_RETCODE SCIPcolGetStrongbranch(
          SCIPclockStop(stat->strongbranchtime, set);
       }
    }
-   assert(*lperror || col->sbdown < SCIP_INVALID);
-   assert(*lperror || col->sbup < SCIP_INVALID);
+   assert(*lperror || sbdown < SCIP_INVALID);
+   assert(*lperror || sbup < SCIP_INVALID);
 
    if( down != NULL)
-      *down = col->sbdown;
+      *down = sbdown;
    if( up != NULL )
-      *up = col->sbup;
+      *up = sbup;
    if( downvalid != NULL )
-      *downvalid = col->sbdownvalid;
+      *downvalid = sbdownvalid;
    if( upvalid != NULL )
-      *upvalid = col->sbupvalid;
+      *upvalid = sbupvalid;
+
+   if( updatecol )
+   {
+      col->sbdown = sbdown;
+      col->sbup = sbup;
+      col->sbdownvalid = sbdownvalid;
+      col->sbupvalid = sbupvalid;
+      col->validsblp = validsblp;
+      col->sbsolval = sbsolval;
+      col->sblpobjval = sblpobjval;
+      col->sbnode = sbnode;
+      col->sbitlim = sbitlim;
+      col->nsbcalls = nsbcalls;
+   }
 
    return SCIP_OKAY;
 }
diff --git a/src/scip/lp.h b/src/scip/lp.h
index ca1f9bbce1..7495d58050 100644
--- a/src/scip/lp.h
+++ b/src/scip/lp.h
@@ -253,6 +253,8 @@ SCIP_RETCODE SCIPcolGetStrongbranch(
    SCIP_PROB*            prob,               /**< problem data */
    SCIP_LP*              lp,                 /**< LP data */
    int                   itlim,              /**< iteration limit for strong branchings */
+   SCIP_Bool             updatecol,          /**< should col be updated, or should it stay in its current state ? */
+   SCIP_Bool             updatestat,         /**< should stat be updated, or should it stay in its current state ? */
    SCIP_Real*            down,               /**< stores dual bound after branching column down */
    SCIP_Real*            up,                 /**< stores dual bound after branching column up */
    SCIP_Bool*            downvalid,          /**< stores whether the returned down value is a valid dual bound, or NULL;
diff --git a/src/scip/scip_var.c b/src/scip/scip_var.c
index 3b83d0387a..0719c98ae5 100644
--- a/src/scip/scip_var.c
+++ b/src/scip/scip_var.c
@@ -2910,6 +2910,7 @@ SCIP_RETCODE SCIPgetVarStrongbranchFrac(
    SCIP*                 scip,               /**< SCIP data structure */
    SCIP_VAR*             var,                /**< variable to get strong branching values for */
    int                   itlim,              /**< iteration limit for strong branchings */
+   SCIP_Bool             indempotent,        /**< should scip's state remain the same after the call (statistics, column states...), or should it be updated ? */
    SCIP_Real*            down,               /**< stores dual bound after branching column down */
    SCIP_Real*            up,                 /**< stores dual bound after branching column up */
    SCIP_Bool*            downvalid,          /**< stores whether the returned down value is a valid dual bound, or NULL;
@@ -2973,7 +2974,7 @@ SCIP_RETCODE SCIPgetVarStrongbranchFrac(
    }
 
    /* call strong branching for column with fractional value */
-   SCIP_CALL( SCIPcolGetStrongbranch(col, FALSE, scip->set, scip->stat, scip->transprob, scip->lp, itlim,
+   SCIP_CALL( SCIPcolGetStrongbranch(col, FALSE, scip->set, scip->stat, scip->transprob, scip->lp, itlim, !indempotent, !indempotent,
          down, up, downvalid, upvalid, lperror) );
 
    /* check, if the branchings are infeasible; in exact solving mode, we cannot trust the strong branching enough to
@@ -2981,7 +2982,17 @@ SCIP_RETCODE SCIPgetVarStrongbranchFrac(
     */
    if( !(*lperror) && SCIPprobAllColsInLP(scip->transprob, scip->set, scip->lp) && !scip->set->misc_exactsolve )
    {
-      SCIP_CALL( analyzeStrongbranch(scip, var, downinf, upinf, downconflict, upconflict) );
+      if( !indempotent )
+      {
+         SCIP_CALL( analyzeStrongbranch(scip, var, downinf, upinf, downconflict, upconflict) );
+      }
+      else
+      {
+         if( downinf != NULL )
+            *downinf = col->sbdownvalid && SCIPsetIsGE(scip->set, col->sbdown, scip->lp->cutoffbound);
+         if( upinf != NULL )
+            *upinf = col->sbupvalid && SCIPsetIsGE(scip->set, col->sbup, scip->lp->cutoffbound);
+      }
    }
 
    return SCIP_OKAY;
@@ -3627,6 +3638,7 @@ SCIP_RETCODE SCIPgetVarStrongbranchInt(
    SCIP*                 scip,               /**< SCIP data structure */
    SCIP_VAR*             var,                /**< variable to get strong branching values for */
    int                   itlim,              /**< iteration limit for strong branchings */
+   SCIP_Bool             indempotent,        /**< should scip's state remain the same after the call (statistics, column states...), or should it be updated ? */
    SCIP_Real*            down,               /**< stores dual bound after branching column down */
    SCIP_Real*            up,                 /**< stores dual bound after branching column up */
    SCIP_Bool*            downvalid,          /**< stores whether the returned down value is a valid dual bound, or NULL;
@@ -3687,7 +3699,7 @@ SCIP_RETCODE SCIPgetVarStrongbranchInt(
    }
 
    /* call strong branching for column */
-   SCIP_CALL( SCIPcolGetStrongbranch(col, TRUE, scip->set, scip->stat, scip->transprob, scip->lp, itlim,
+   SCIP_CALL( SCIPcolGetStrongbranch(col, TRUE, scip->set, scip->stat, scip->transprob, scip->lp, itlim, !indempotent, !indempotent,
          down, up, downvalid, upvalid, lperror) );
 
    /* check, if the branchings are infeasible; in exact solving mode, we cannot trust the strong branching enough to
@@ -3695,7 +3707,17 @@ SCIP_RETCODE SCIPgetVarStrongbranchInt(
     */
    if( !(*lperror) && SCIPprobAllColsInLP(scip->transprob, scip->set, scip->lp) && !scip->set->misc_exactsolve )
    {
-      SCIP_CALL( analyzeStrongbranch(scip, var, downinf, upinf, downconflict, upconflict) );
+      if( !indempotent )
+      {
+         SCIP_CALL( analyzeStrongbranch(scip, var, downinf, upinf, downconflict, upconflict) );
+      }
+      else
+      {
+         if( downinf != NULL )
+            *downinf = col->sbdownvalid && SCIPsetIsGE(scip->set, col->sbdown, scip->lp->cutoffbound);
+         if( upinf != NULL )
+            *upinf = col->sbupvalid && SCIPsetIsGE(scip->set, col->sbup, scip->lp->cutoffbound);
+      }
    }
 
    return SCIP_OKAY;
diff --git a/src/scip/scip_var.h b/src/scip/scip_var.h
index e8eabd5490..c0c70d75f8 100644
--- a/src/scip/scip_var.h
+++ b/src/scip/scip_var.h
@@ -1201,6 +1201,7 @@ SCIP_RETCODE SCIPgetVarStrongbranchFrac(
    SCIP*                 scip,               /**< SCIP data structure */
    SCIP_VAR*             var,                /**< variable to get strong branching values for */
    int                   itlim,              /**< iteration limit for strong branchings */
+   SCIP_Bool             indempotent,        /**< should scip's state remain the same after the call (statistics, column states...), or should it be updated ? */
    SCIP_Real*            down,               /**< stores dual bound after branching column down */
    SCIP_Real*            up,                 /**< stores dual bound after branching column up */
    SCIP_Bool*            downvalid,          /**< stores whether the returned down value is a valid dual bound, or NULL;
@@ -1284,6 +1285,7 @@ SCIP_RETCODE SCIPgetVarStrongbranchInt(
    SCIP*                 scip,               /**< SCIP data structure */
    SCIP_VAR*             var,                /**< variable to get strong branching values for */
    int                   itlim,              /**< iteration limit for strong branchings */
+   SCIP_Bool             indempotent,        /**< should scip's state remain the same after the call (statistics, column states...), or should it be updated ? */
    SCIP_Real*            down,               /**< stores dual bound after branching column down */
    SCIP_Real*            up,                 /**< stores dual bound after branching column up */
    SCIP_Bool*            downvalid,          /**< stores whether the returned down value is a valid dual bound, or NULL;
-- 
2.19.1

